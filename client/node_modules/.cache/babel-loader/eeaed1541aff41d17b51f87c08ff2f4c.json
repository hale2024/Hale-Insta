{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hale\\\\Desktop\\\\WebF\\\\client\\\\src\\\\components\\\\PostShare\\\\PostShare.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport './PostShare.css';\nimport ProfileImage from '../../img/profileImg.jpg'; // The below are icons\n\nimport { UilScenery } from \"@iconscout/react-unicons\";\nimport { UilPlayCircle } from \"@iconscout/react-unicons\";\nimport { UilLocationPoint } from \"@iconscout/react-unicons\";\nimport { UilSchedule } from \"@iconscout/react-unicons\";\nimport { UilTimes } from \"@iconscout/react-unicons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { uploadImage, uploadPost } from \"../../actions/UploadAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostShare = () => {\n  _s();\n\n  const serverPublic = process.env.REACT_APP_PUBLIC_FOLDER;\n  const loading = useSelector(state => state.postReducer.uploading);\n  const [image, setImage] = useState(null);\n  const imageRef = useRef();\n  const dispatch = useDispatch();\n  const desc = useRef();\n  const {\n    user\n  } = useSelector(state => state.authReducer.authData);\n\n  const onImageChange = event => {\n    if (event.target.files && event.target.files[0]) {\n      // the if condition checks if an image folder exists and if an image file exists\n      //inside the folder specified, the image file is the image\n      //we will upload using our input tag below\n      let img = event.target.files[0];\n      setImage(img);\n    }\n  };\n\n  const reset = () => {\n    setImage(null);\n    desc.current.value = \"\";\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault(); // user is the authData part from our reducer\n\n    const newPost = {\n      userId: user._id,\n      desc: desc.current.value\n    };\n\n    if (image) {\n      const data = new FormData();\n      const filename = Date.now() + image.name;\n      data.append(\"name\", filename);\n      data.append(\"file\", image);\n      newPost.image = filename;\n      console.log(newPost);\n\n      try {\n        dispatch(uploadImage(data));\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    dispatch(uploadPost(newPost));\n    reset(); // description of form data https://developer.mozilla.org/en-US/docs/Web/API/FormData/Using_FormData_Objects\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PostShare\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: user.coverPicture ? serverPublic + user.coverPicture : serverPublic + \"defaultProfile.png\",\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: desc,\n        required: true,\n        type: \"text\",\n        placeholder: \"What's happening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postOptions\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"option\",\n          style: {\n            color: \"var(--photo)\"\n          },\n          onClick: () => imageRef.current.click(),\n          children: [/*#__PURE__*/_jsxDEV(UilScenery, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this), \"Photo\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"option\",\n          style: {\n            color: \"var(--video)\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(UilPlayCircle, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this), \"Video\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"option\",\n          style: {\n            color: \"var(--location)\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(UilLocationPoint, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this), \"Location\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"option\",\n          style: {\n            color: \"var(--sc hedule)\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(UilSchedule, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this), \"Schedule\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button ps-button\",\n          onClick: handleSubmit,\n          disabled: loading,\n          children: loading ? \"Uploading...\" : \"Share\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"none\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            name: \"myImage\",\n            ref: imageRef,\n            onChange: onImageChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), image && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"previewImage\",\n        children: [/*#__PURE__*/_jsxDEV(UilTimes, {\n          onClick: () => setImage(null)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: URL.createObjectURL(image),\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostShare, \"UAgU3ie+bLUDAtajc1St9UcE9oY=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n\n_c = PostShare;\nexport default PostShare;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostShare\");","map":{"version":3,"sources":["C:/Users/Hale/Desktop/WebF/client/src/components/PostShare/PostShare.jsx"],"names":["React","useRef","useState","ProfileImage","UilScenery","UilPlayCircle","UilLocationPoint","UilSchedule","UilTimes","useDispatch","useSelector","uploadImage","uploadPost","PostShare","serverPublic","process","env","REACT_APP_PUBLIC_FOLDER","loading","state","postReducer","uploading","image","setImage","imageRef","dispatch","desc","user","authReducer","authData","onImageChange","event","target","files","img","reset","current","value","handleSubmit","e","preventDefault","newPost","userId","_id","data","FormData","filename","Date","now","name","append","console","log","err","coverPicture","color","click","display","URL","createObjectURL"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport './PostShare.css'\r\n\r\nimport ProfileImage from '../../img/profileImg.jpg'\r\n// The below are icons\r\nimport { UilScenery } from \"@iconscout/react-unicons\";\r\nimport { UilPlayCircle } from \"@iconscout/react-unicons\";\r\nimport { UilLocationPoint } from \"@iconscout/react-unicons\";\r\nimport { UilSchedule } from \"@iconscout/react-unicons\";\r\nimport { UilTimes } from \"@iconscout/react-unicons\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { uploadImage, uploadPost } from \"../../actions/UploadAction\";\r\n\r\nconst PostShare = () => {\r\n  \r\n  const serverPublic=process.env.REACT_APP_PUBLIC_FOLDER\r\n  const loading = useSelector((state)=>state.postReducer.uploading)\r\n  const [image, setImage] = useState(null);\r\n  const imageRef = useRef();\r\n  const dispatch = useDispatch();\r\n  const desc = useRef();\r\n\r\n  const {user}=useSelector((state) => state.authReducer.authData)\r\n  const onImageChange = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      // the if condition checks if an image folder exists and if an image file exists\r\n      //inside the folder specified, the image file is the image\r\n      //we will upload using our input tag below\r\n     \r\n      let img = event.target.files[0];\r\n      setImage(img);\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setImage(null);\r\n    desc.current.value = \"\";\r\n  };\r\n\r\n  const handleSubmit = (e) =>{\r\n    e.preventDefault();\r\n    // user is the authData part from our reducer\r\n    const newPost={\r\n      userId: user._id,\r\n      desc: desc.current.value,\r\n    }\r\n    if (image) {\r\n      const data = new FormData();\r\n      const filename = Date.now() + image.name;\r\n      data.append(\"name\", filename);\r\n      data.append(\"file\", image);\r\n      newPost.image = filename;\r\n      console.log(newPost);\r\n      try {\r\n        dispatch(uploadImage(data));\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n    dispatch(uploadPost(newPost));\r\n    reset();\r\n\r\n    \r\n    // description of form data https://developer.mozilla.org/en-US/docs/Web/API/FormData/Using_FormData_Objects\r\n  }\r\n  return (\r\n    <div className=\"PostShare\">\r\n        <img src={user.coverPicture? serverPublic+user.coverPicture: serverPublic+\"defaultProfile.png\"} alt=\"\" />\r\n        <div>\r\n          <input \r\n          ref={desc}\r\n          required\r\n          type=\"text\" placeholder=\"What's happening\"/>\r\n          <div className=\"postOptions\">\r\n\r\n              <div className=\"option\" style={{color: \"var(--photo)\"}} onClick={()=>imageRef.current.click()}>\r\n                {/* Whenever we click the UilScenery the control is passed to the imageRef input below. (it is right below Share)  */}\r\n                <UilScenery/>\r\n                Photo\r\n              </div>\r\n              <div className=\"option\" style={{color: \"var(--video)\"}}>\r\n                <UilPlayCircle/>\r\n                Video\r\n              </div>\r\n              <div className=\"option\" style={{color: \"var(--location)\"}}>\r\n                <UilLocationPoint/>\r\n                Location\r\n              </div>\r\n              <div className=\"option\" style={{color: \"var(--sc hedule)\"}}>\r\n                <UilSchedule/>\r\n                Schedule\r\n              </div>\r\n              <button\r\n                  className=\"button ps-button\"\r\n                  onClick={handleSubmit}\r\n                  disabled={loading}>\r\n                  {loading ? \"Uploading...\" : \"Share\"}\r\n              </button>\r\n              {/* the below div is activated when the imageRef.current is clicked because imageRef.current points to it*/}\r\n              <div style={{display: \"none\"}}>\r\n                <input type=\"file\" name=\"myImage\" ref={imageRef} onChange={onImageChange}/>\r\n              </div>\r\n\r\n          </div>\r\n\r\n                  {image && (\r\n                    <div className=\"previewImage\">\r\n                      <UilTimes onClick={()=>setImage(null)}/>\r\n                      {/* Url.createObjectUrL creates a url link for the image object */}\r\n                      <img src={URL.createObjectURL(image)} alt=\"\" />\r\n                    </div>\r\n                  )}\r\n        </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostShare\r\n"]},"metadata":{},"sourceType":"module"}