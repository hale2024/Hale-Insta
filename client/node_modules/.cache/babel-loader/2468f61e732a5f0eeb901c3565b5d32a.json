{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hale\\\\Desktop\\\\WebF\\\\client\\\\src\\\\components\\\\Posts\\\\Posts.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './Posts.css';\nimport Post from '../Post/Post';\nimport { PostsData } from '../../Data/PostsData';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect } from 'react';\nimport { getTimelinePosts } from '../../actions/postAction';\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Posts = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    user\n  } = useSelector(state => state.authReducer.authData);\n  let {\n    posts,\n    loading\n  } = useSelector(state => state.postReducer); // runs only on the first re-render\n\n  useEffect(() => {\n    dispatch(getTimelinePosts(user._id));\n  }, [posts.length]);\n  const params = useParams();\n  if (posts.length == 0) return 'No Posts'; // Getting the id param from your post\n\n  if (params.id) posts = posts.filter(post => post.userId === params.id);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Posts\",\n    children: loading ? \"Fetching posts....\" : posts.map((post, id) => {\n      return /*#__PURE__*/_jsxDEV(Post, {\n        data: post,\n        id: id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 28\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Posts, \"ZtwFXL7voLewgpy6ZPQUWJswnlE=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useParams];\n});\n\n_c = Posts;\nexport default Posts; //   const params = useParams()\n//   if(!posts) return 'No Posts';\n//   // Getting the id param from your post\n//   if(params.id) posts = posts.filter((post)=> post.userId===params.id)\n//   return (\n//     <div className=\"Posts\">\n//       {loading\n//         ? \"Fetching posts....\"\n//         : posts.map((post, id) => {\n//             return <Post data={post} key={id} />;\n//           })}\n//     </div>\n//   );\n// };\n// export default Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["C:/Users/Hale/Desktop/WebF/client/src/components/Posts/Posts.jsx"],"names":["React","Post","PostsData","useSelector","useDispatch","useEffect","getTimelinePosts","useParams","Posts","dispatch","user","state","authReducer","authData","posts","loading","postReducer","_id","length","params","id","filter","post","userId","map"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,SAAQC,SAAR,QAAwB,sBAAxB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAAQC,gBAAR,QAA+B,0BAA/B;AACA,SAASC,SAAT,QAA0B,kBAA1B;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAM;AAACM,IAAAA;AAAD,MAAOP,WAAW,CAAEQ,KAAD,IAASA,KAAK,CAACC,WAAN,CAAkBC,QAA5B,CAAxB;AACA,MAAI;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAmBZ,WAAW,CAAEQ,KAAD,IAASA,KAAK,CAACK,WAAhB,CAAlC,CAHkB,CAIlB;;AACAX,EAAAA,SAAS,CAAC,MAAI;AACZI,IAAAA,QAAQ,CAACH,gBAAgB,CAACI,IAAI,CAACO,GAAN,CAAjB,CAAR;AACD,GAFQ,EAEP,CAACH,KAAK,CAACI,MAAP,CAFO,CAAT;AAGA,QAAMC,MAAM,GAAGZ,SAAS,EAAxB;AACA,MAAGO,KAAK,CAACI,MAAN,IAAc,CAAjB,EAAoB,OAAO,UAAP,CATF,CAUlB;;AACA,MAAGC,MAAM,CAACC,EAAV,EAAcN,KAAK,GAAGA,KAAK,CAACO,MAAN,CAAcC,IAAD,IAASA,IAAI,CAACC,MAAL,KAAcJ,MAAM,CAACC,EAA3C,CAAR;AACd,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cACWL,OAAO,GACJ,oBADI,GAEJD,KAAK,CAACU,GAAN,CAAU,CAACF,IAAD,EAAOF,EAAP,KAAY;AACpB,0BAAO,QAAC,IAAD;AAAM,QAAA,IAAI,EAAEE,IAAZ;AAAkB,QAAA,EAAE,EAAEF;AAAtB;AAAA;AAAA;AAAA;AAAA,cAAP;AACL,KAFG;AAHd;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CArBD;;GAAMZ,K;UACaJ,W,EACJD,W,EACUA,W,EAKRI,S;;;KARXC,K;AAuBN,eAAeA,KAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React from 'react'\r\nimport './Posts.css'\r\nimport Post from '../Post/Post';\r\nimport {PostsData} from '../../Data/PostsData';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useEffect } from 'react';\r\nimport {getTimelinePosts} from '../../actions/postAction';\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst Posts = () => {\r\n  const dispatch = useDispatch();\r\n  const {user}=useSelector((state)=>state.authReducer.authData);\r\n  let {posts, loading} = useSelector((state)=>state.postReducer);\r\n  // runs only on the first re-render\r\n  useEffect(()=>{\r\n    dispatch(getTimelinePosts(user._id))\r\n  },[posts.length])\r\n  const params = useParams()\r\n  if(posts.length==0) return 'No Posts';\r\n  // Getting the id param from your post\r\n  if(params.id) posts = posts.filter((post)=> post.userId===params.id)\r\n  return (\r\n    <div className=\"Posts\">\r\n              {loading\r\n                ? \"Fetching posts....\"\r\n                : posts.map((post, id)=>{\r\n                    return <Post data={post} id={id}/>\r\n              })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Posts\r\n//   const params = useParams()\r\n//   if(!posts) return 'No Posts';\r\n//   // Getting the id param from your post\r\n//   if(params.id) posts = posts.filter((post)=> post.userId===params.id)\r\n//   return (\r\n//     <div className=\"Posts\">\r\n//       {loading\r\n//         ? \"Fetching posts....\"\r\n//         : posts.map((post, id) => {\r\n//             return <Post data={post} key={id} />;\r\n//           })}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Posts;\r\n "]},"metadata":{},"sourceType":"module"}